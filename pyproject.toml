[tool.ruff]
unsafe-fixes = true
line-length = 90
indent-width = 4
target-version = "py312"
exclude = ["backup_pb2_grpc.py", "backup_pb2.pyi"]
extend-exclude = ["tests"]
cache-dir = "/tmp/ruff-cache/"

[tool.ruff.lint]
# "E265", "E261", "E262", in preview
select = ["ALL"]
ignore = [
    # typing kwargs/self/cls
    "ANN003", "ANN101", "ANN102",
    # catch Exception, docstr, lint/format conflicts
    "BLE001", "D1", "D203", "D212", "D213",
    # literal str in exc, f-str in exc, todo without issue, exc name
    "EM101", "EM102", "FIX002", "N818",
    # args count, sum([]), todo author/link
    "PLR0913", "RUF017", "TD002", "TD003",
    # todo colon/text, exc msg, any in kw/args 
    "TD004", "TD005", "TRY003", "ANN401"
]


[tool.ruff.lint.extend-per-file-ignores]
# assert
"tracker/tests/*" = ["S101"]
# access to the private members, commented code,
"tracker/protos/*" = ["SLF001", "ERA001"]
"tracker/models/models.py" = ["N802", "ANN002"]
# return type for routes
"tracker/*/routes.py" = ["ANN201"]
"tracker/main.py" = ["ANN201"]
# == True for sql
"tracker/*/db.py" = ["E711", "E712"]
"tracker/reading_log/statistics.py" = ["E711", "E712"]
"tracker/*/schemas.py" = ["S101"]


[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Form",
    "fastapi.Body",
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.pep8-naming]
classmethod-decorators = [
    "pydantic.validator",
    "pydantic.field_validator",
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
lines-after-imports = 2

[tool.ruff.lint.flake8-annotations]
suppress-none-returning = true

[tool.mypy]
python_version = 3.12
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "*.schemas.*"
ignore_errors = true

[tool.poetry]
name = "readingtracker"
version = "2.19.7"
description = "Reading queue, logging the reading, keep some notes"
authors = ["kunansy <k@kunansy.ru>"]
license = "MIT"

[tool.poetry.dependencies]
python = "^3.12"
SQLAlchemy = "~2.0.0"
pydantic = "~2.6.0"
environs = "~11.0.0"
asyncpg = "~0.29.0"
fastapi = "~0.110.0"
uvicorn = "~0.27.0.post1"
Jinja2 = "~3.1.1"
uvloop = "~0.19.0"
python-multipart = "~0.0.6"
matplotlib = "~3.8.0"
orjson = "~3.9.1"
types-orjson = "~3.6.2"
gunicorn = "~21.2.0"
aiomysql = "~0.2.0"
networkx = "~3.2.1"
pyvis = "~0.3.2"
speechrecognition = "~3.10.0"
pyaudio = "~0.2.13"
pydub = "~0.25.1"
uuid6 = "~2024.01.12"
grpcio = "~1.62.0"
grpcio-tools = "~1.62.0"
types-protobuf = "^4.23.0.1"
starlette-exporter = "~0.21.0"
beautifulsoup4 = "~4.12.2"
lxml = "~5.1.0"
aiokafka = "~0.10.0"
redis = {version = "~5.0.2", extras = ["hiredis"]}
aiohttp = "~3.9.3"

[tool.poetry.group.dev.dependencies]
mypy = "~1.9.0"
bumpversion = "~0.6.0"
greenlet = "~3.0.1"
ruff = "~0.3.0"
pytest = "~8.0.0"
pytest-asyncio = "~0.23.2"
coverage = "~7.4.0"
pytest-xdist = "~3.5.0"
types-redis = "^4.6.0.11"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
